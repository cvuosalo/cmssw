void volumeHandle::buildTubs() {
  LogDebug("magneticfield::volumeHandle") << "Building tubs surfaces...: " << endl;

  DDTubs tubs(solid);

  // Change lengths from Geant units (mm) to CMS units (cm)
  double zhalf = geant_units::operators::convertMmToCm(tubs.zhalf());
  double rIn = geant_units::operators::convertMmToCm(tubs.rIn());
  double rOut = geant_units::operators::convertMmToCm(tubs.rOut());
  double startPhi = tubs.startPhi();
  double deltaPhi = tubs.deltaPhi();

  LogDebug("magneticfield::volumeHandle") << "zhalf    " << zhalf << endl
                                          << "rIn      " << rIn << endl
                                          << "rOut     " << rOut << endl
                                          << "startPhi " << startPhi << endl
                                          << "deltaPhi " << deltaPhi << endl;

  // recalculate center: (for a DDTubs, DDD gives 0,0,Z)
  double rCentr = (rIn + rOut) / 2.;
  Geom::Phi<double> phiCenter(startPhi + deltaPhi / 2.);
  center_ = refPlane->toGlobal(LocalPoint(rCentr * cos(phiCenter), rCentr * sin(phiCenter), 0.));
  // For cons and tubs RN = R.
  theRN = rCentr;

  // FIXME: use builder
  surfaces[outer] = new Cylinder(rOut, Surface::PositionType(0, 0, center_.z()), Surface::RotationType());

  // The inner cylider may be degenreate. Not easy to have a null surface
  // in the current implementation (surfaces[inner] is a RCP!)

  surfaces[inner] = new Cylinder(rIn, Surface::PositionType(0, 0, center_.z()), Surface::RotationType());

  // All other surfaces
  buildPhiZSurf(startPhi, deltaPhi, zhalf, rCentr);

  // Check ordering.
  if (debug) {
    if (dynamic_cast<const Cylinder*>(&(*surfaces[outer]))->radius() <
        dynamic_cast<const Cylinder*>(&(*surfaces[inner]))->radius()) {
      LogDebug("magneticfield::volumeHandle") << "*** WARNING: pos_outer < pos_inner " << endl;
    }
  }
  // Save volume boundaries
  theRMin = rIn;
  theRMax = rOut;
  thePhiMin = surfaces[phiminus]->position().phi();
}
